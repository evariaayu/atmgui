/* * ATM Example system - file SimulatedBank.java  * * copyright (c) 2001 - Russell C. Bjork * */ package simulation;import banking.AccountInformation;import banking.Balances;import banking.Card;import banking.Message;import banking.Money;import banking.Status;import java.io.*;/** Simulation of the bank.  A set of simulated accounts is initalized at startup. */public class SimulatedBank{       /** PIN for each card.  (Valid card numbers start with 1)     */    private static final int PIN [] =    {         0,  // dummy for nonexistent card 0        42,         1234,        1    };    /** Array of account numbers associated with each card.  For each card,     *  there can be three different types of account, which correspond to     *  the names in class AccountInformation.  0 means no account of this     *  type.   (Valid card numbers start with 1)     */    private static final int ACCOUNT_NUMBER [] [] =    {         { 0},    // dummies for nonexistent card 0        { 1, 12222 },        { 1, 12223 },        { 1, 12224 }    };    /** Withdrawals so far today on each card.   (Valid card numbers start with 1)     */     private static Money WITHDRAWALS_TODAY [] =    {        new Money(0),   // dummy for nonexistent card 0        new Money(0),        new Money(0)    };        /** Maximum daily withdrawal limit for any one card.       */    private static final Money DAILY_WITHDRAWAL_LIMIT = new Money(1250000);        /** Balance for each account (will change as program runs, hence not a     *  static final.     */    private Money BALANCE [] =    {        new Money(0),   // dummy for nonexistent account 0        new Money(150000),         new Money(500000),        new Money(1000000)     };     /** Available alance for each account (will change as program runs, hence     *  not a static final.     */    private Money AVAILABLE_BALANCE [] =    {         new Money(0),   // dummy for nonexistent account 0        new Money(150000),         new Money(500000),        new Money(1000000)     };        private String toAccountFile = "F:/My Documents/SEMESTER 7/PBO/atmgui/account/";    private String fromAccountFile = "F:/My Documents/SEMESTER 7/PBO/atmgui/account/";    private String toAccountPathBalance = null;    private String toAccountPathAvailBalance = null;    private String fromAccountPathBalance=null;    private String fromAccountPathAvailBalance=null;    private int fromBalance;    private int fromAvailBalance;    private int toBalance;    private int toAvailBalance;    /** Simulate the handling of a message     *     *  @param message the message to send     *  @param balances (out) balances in customer's account as reported     *         by bank     *  @return status code returned by bank     */    public Status handleMessage(Message message, Balances balances)    {              int cardNumber = message.getCard().getNumber();         if (cardNumber < 1 || cardNumber > PIN.length)            return new Failure("Invalid card");            if (message.getPIN() != PIN [ cardNumber ] )            return new InvalidPIN();            switch(message.getMessageCode())        {            case Message.WITHDRAWAL:                            return withdrawal(message, balances);                                        case Message.INITIATE_DEPOSIT:                            return initiateDeposit(message);                        case Message.COMPLETE_DEPOSIT:                            return completeDeposit(message, balances);                        case Message.TRANSFER:                            return transfer(message, balances);                        case Message.INQUIRY:                            return inquiry(message, balances);                            case Message.BUYCREDIT:                return buycredit(message, balances);        }                // Need to keep compiler happy                return null;    }    /** Simulate processing of a withdrawal     *     *  @param message the message describing the withdrawal requested     *  @param balances (out) balances in account after withdrawal     *  @return status code derived from current values     */    private Status withdrawal(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber(); //urutan                //nomor rekening        int accountNumberFrom = noRekening(cardNumber);        //untuk savings atau nggak        int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getFromAccount() ];        //System.out.println("message.getFromAccount() "+message.getFromAccount());        if (accountNumberFrom == 0)            return new Failure("Invalid account type");        if (accountNumber == 0)            return new Failure("Invalid account type");            Money amount = message.getAmount();        String amt = message.getAmount().toString();        //System.out.println("amount "+amt);        //ngecek batas pengambilan duit hari ini        Money limitRemaining = new Money(DAILY_WITHDRAWAL_LIMIT);        limitRemaining.subtract(WITHDRAWALS_TODAY[ cardNumber ]);        if (! amount.lessEqual(limitRemaining))            return new Failure("Daily withdrawal limit exceeded");                fromAccountPathBalance = fromAccountFile +accountNumberFrom+"-balance.txt";        File fileAccountFromBalance = new File (fromAccountPathBalance);                fromAccountPathAvailBalance = fromAccountFile +accountNumberFrom+"-availablebalance.txt";        File fileAccountFromAvailBalance = new File(fromAccountPathAvailBalance);                PrintWriter writerFromBalance =null;        PrintWriter writerFromAvailBalance =null;        String line = null;        String retval =null;           try        {                        FileReader fileReaderFromBalance = new FileReader(fileAccountFromBalance);            BufferedReader buffReaderFromBalance = new BufferedReader(fileReaderFromBalance);            while( (line = buffReaderFromBalance.readLine())!=null)            {               String[] split = line.split("\r\n");               String fb = split[0];               fromBalance = Integer.parseInt(fb);               //System.out.println("fromBalance "+fromBalance);            }            buffReaderFromBalance.close();                        FileReader fileReaderFromAvailBalance = new FileReader(fileAccountFromAvailBalance);            BufferedReader buffReaderFromAvailBalance = new BufferedReader(fileReaderFromAvailBalance);            while( (line = buffReaderFromAvailBalance.readLine()) !=null)            {               String[] split = line.split("\r\n");               String fb = split[0];               fromAvailBalance = Integer.parseInt(fb);               //System.out.println("fromAvailBalance "+fromAvailBalance);            }            buffReaderFromAvailBalance.close();        }        catch (FileNotFoundException e)        {            e.printStackTrace();        }        catch (IOException e)        {            e.printStackTrace();        }        Money monFromBalance = new Money(fromBalance);        Money monFromAvailBalance = new Money(fromAvailBalance);        String mfab = monFromAvailBalance.toString();        //System.out.println("Amount "+amt);        //System.out.println("monFromAvailBalance" + mfab);        if (! amount.lessEqual(monFromAvailBalance))                return new Failure("Insufficient available balance");                /*        if (! amount.lessEqual(AVAILABLE_BALANCE [ accountNumber ]))             return new Failure("Insufficient available balance");*/        // Update withdrawals today and account balances once we know everything is        // OK                    WITHDRAWALS_TODAY [ cardNumber ].add(amount);                //BALANCE [ accountNumber ].subtract(amount);        //AVAILABLE_BALANCE [ accountNumber ].subtract(amount);        long subtractFromBalance = monFromBalance.subtractLong(amount);        long subtractFromAvailBalance = monFromAvailBalance.subtractLong(amount);                try        {            FileWriter fwFromBalance = new FileWriter(fileAccountFromBalance, true);                                  writerFromBalance = new PrintWriter(fwFromBalance);                        writerFromBalance.println(subtractFromBalance);            writerFromBalance.flush();            writerFromBalance.close();                        FileWriter fwFromAvailBalance = new FileWriter(fileAccountFromAvailBalance, true);                                  writerFromAvailBalance = new PrintWriter(fwFromAvailBalance);                        writerFromAvailBalance.println(subtractFromAvailBalance);            writerFromAvailBalance.flush();            writerFromAvailBalance.close();        }        catch (FileNotFoundException e)        {            e.printStackTrace();        }        catch (IOException e)        {            e.printStackTrace();        }            // Return updated balances        //balances.setBalances(BALANCE [ accountNumber ],           //                   AVAILABLE_BALANCE [ accountNumber ]);                return new Success();    }         /**      * Simulasi pembelian pulsa     */        private Status buycredit(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();        //nomor rekening        int accountNumberFrom = ACCOUNT_NUMBER [cardNumber][1];        int accountNumber = ACCOUNT_NUMBER [cardNumber][message.getFromAccount()];                if(accountNumber ==0)        {            return new Failure("Invalid account type");        }        if(accountNumberFrom ==0)        {            return new Failure("Invalid account type");        }        Money amount = message.getAmount();        String amt = message.getAmount().toString();        //System.out.println("amount "+amt);        Money limitRemaining = new Money(DAILY_WITHDRAWAL_LIMIT);        limitRemaining.subtract(WITHDRAWALS_TODAY[cardNumber]);        if (! amount.lessEqual(limitRemaining))            return new Failure("Daily withdrawal limit exceeded");                fromAccountPathBalance = fromAccountFile +accountNumberFrom+"-balance.txt";        File fileAccountFromBalance = new File (fromAccountPathBalance);                fromAccountPathAvailBalance = fromAccountFile +accountNumberFrom+"-availablebalance.txt";        File fileAccountFromAvailBalance = new File(fromAccountPathAvailBalance);                PrintWriter writerFromBalance =null;        PrintWriter writerFromAvailBalance =null;        String line = null;        String retval =null;           try        {                        FileReader fileReaderFromBalance = new FileReader(fileAccountFromBalance);            BufferedReader buffReaderFromBalance = new BufferedReader(fileReaderFromBalance);            while( (line = buffReaderFromBalance.readLine())!=null)            {               String[] split = line.split("\r\n");               String fb = split[0];               fromBalance = Integer.parseInt(fb);               //System.out.println("fromBalance "+fromBalance);            }            buffReaderFromBalance.close();                        FileReader fileReaderFromAvailBalance = new FileReader(fileAccountFromAvailBalance);            BufferedReader buffReaderFromAvailBalance = new BufferedReader(fileReaderFromAvailBalance);            while( (line = buffReaderFromAvailBalance.readLine()) !=null)            {               String[] split = line.split("\r\n");               String fb = split[0];               fromAvailBalance = Integer.parseInt(fb);               //System.out.println("fromAvailBalance "+fromAvailBalance);            }            buffReaderFromAvailBalance.close();        }        catch (FileNotFoundException e)        {            e.printStackTrace();        }        catch (IOException e)        {            e.printStackTrace();        }        Money monFromBalance = new Money(fromBalance);        Money monFromAvailBalance = new Money(fromAvailBalance);        String mfab = monFromAvailBalance.toString();        //System.out.println("Amount "+amt);        //System.out.println("monFromAvailBalance" + mfab);        if (! amount.lessEqual(monFromAvailBalance))                return new Failure("Insufficient available balance");                WITHDRAWALS_TODAY[cardNumber].add(amount);        //BALANCE[accountNumber].subtract(amount);        //AVAILABLE_BALANCE[accountNumber].subtract(amount);        long subtractFromBalance = monFromBalance.subtractLong(amount);        //System.out.println("Simulated Bank subtract "+ subtractFromBalance);        long subtractFromAvailBalance = monFromAvailBalance.subtractLong(amount);                try        {            FileWriter fwFromBalance = new FileWriter(fileAccountFromBalance, true);                                  writerFromBalance = new PrintWriter(fwFromBalance);                        writerFromBalance.println(subtractFromBalance);            writerFromBalance.flush();            writerFromBalance.close();                        FileWriter fwFromAvailBalance = new FileWriter(fileAccountFromAvailBalance, true);                                  writerFromAvailBalance = new PrintWriter(fwFromAvailBalance);                        writerFromAvailBalance.println(subtractFromAvailBalance);            writerFromAvailBalance.flush();            writerFromAvailBalance.close();        }        catch (FileNotFoundException e)        {            e.printStackTrace();        }        catch (IOException e)        {            e.printStackTrace();        }            //balances.setBalances(BALANCE [accountNumber],                           // AVAILABLE_BALANCE[accountNumber]);        return new Success();    }            /** Simulate initiation of a deposit. At this point, the bank only approves     *  the validity of the deposit - no changes to the records are made until     *  the envelope is actually inserted      *     *  @param message the message describing the deposit requested     *  @return status code derived from current values     */    private Status initiateDeposit(Message message)    {        int cardNumber = message.getCard().getNumber();             int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getToAccount() ];        if (accountNumber == 0)            return new Failure("Invalid account type");                    // Don't update anything yet                    return new Success();    }            /** Simulate completion of a deposit     *     *  @param message the message describing the deposit requested     *  @param balances (out) balances (not updated until completed)     *  @return status code - must always be success in this case     */    private Status completeDeposit(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();                 int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getToAccount() ];        if (accountNumber == 0)            return new Failure("Invalid account type");                    // Now we can update the balance                Money amount = message.getAmount();        BALANCE [ accountNumber ].add(amount);                // Return updated balances                balances.setBalances(BALANCE [ accountNumber ],                              AVAILABLE_BALANCE [ accountNumber ]);                return new Success();    }            /** Simulate processing of a transfer     *     *  @param message the message describing the transfer requested     *  @param balances (out) balances in "to" account after transfer     *  @return status code derived from current values     */    private Status transfer(Message message, Balances balances)// throws IOException     {                int cardNumber = message.getCard().getNumber();         //System.out.printf("cardNumber = %d\n", cardNumber);        /*         * Mendapatkan nomor rekening untuk rekening asal         */        int accountNumberFrom = ACCOUNT_NUMBER[cardNumber][1];        /*         * Mendapatkan file untuk rekening asal         */        fromAccountPathBalance = fromAccountFile +accountNumberFrom+"-balance.txt";        fromAccountPathAvailBalance = fromAccountFile +accountNumberFrom+"-availablebalance.txt";                //System.out.printf("toAccountPath = %s\n", toAccountPath);        File fileAccountFromBalance = new File (fromAccountPathBalance);        File fileAccountFromAvailBalance = new File(fromAccountPathAvailBalance);        //System.out.printf("accountNumberFrom = %d\n", accountNumberFrom);                /*         * Mendapatkan nomor rekening untuk rekening tujuan         */        int accountNumberTo = message.getToAccount();        /*         * Mendapatkan file untuk rekening tujuan         */        toAccountPathBalance = toAccountFile +accountNumberTo+"-balance.txt";        toAccountPathAvailBalance = toAccountFile +accountNumberTo+"-availablebalance.txt";        File fileAccountToBalance = new File(toAccountPathBalance);        File fileAccountToAvailBalance = new File(toAccountPathAvailBalance);        //File file = new File("F:\\My Documents\\SEMESTER 7\\PBO\\atmgui\\account\\1-transfer.txt");        if (accountNumberFrom == 0)            return new Failure("Invalid from account type");        if (accountNumberTo == 0)            return new Failure("Invalid to account type");        if (accountNumberFrom == accountNumberTo)            return new Failure("Can't transfer money from\n" +                                "an account to itself");                                        PrintWriter writerFromBalance =null;        PrintWriter writerFromAvailBalance =null;        PrintWriter writerToBalance =null;        PrintWriter writerToAvailBalance=null;        String line = null;        String retval =null;        try        {                        FileReader fileReaderFromBalance = new FileReader(fileAccountFromBalance);            BufferedReader buffReaderFromBalance = new BufferedReader(fileReaderFromBalance);            while( (line = buffReaderFromBalance.readLine())!=null)            {               String[] split = line.split("\r\n");               String fb = split[0];               fromBalance = Integer.parseInt(fb);               //System.out.println("fromBalance "+fromBalance);            }            buffReaderFromBalance.close();                        FileReader fileReaderFromAvailBalance = new FileReader(fileAccountFromAvailBalance);            BufferedReader buffReaderFromAvailBalance = new BufferedReader(fileReaderFromAvailBalance);            while( (line = buffReaderFromAvailBalance.readLine()) !=null)            {               String[] split = line.split("\r\n");               String fb = split[0];               fromAvailBalance = Integer.parseInt(fb);               //System.out.println("fromAvailBalance "+fromAvailBalance);            }            buffReaderFromAvailBalance.close();        }        catch (FileNotFoundException e)        {            e.printStackTrace();        }        catch (IOException e)        {            e.printStackTrace();        }        Money monFromBalance = new Money(fromBalance);        Money monFromAvailBalance = new Money(fromAvailBalance);                Money amount = message.getAmount();        String amt = message.getAmount().toString();        //System.out.println("Simulated Bank amount "+amt);        String[] parts = amt.split("Rp");        retval = parts[1];                if (! amount.lessEqual(monFromAvailBalance))                return new Failure("Insufficient available balance");        try        {                        FileReader fileReaderToBalance = new FileReader(fileAccountToBalance);            BufferedReader buffReaderToBalance = new BufferedReader(fileReaderToBalance);            while( (line = buffReaderToBalance.readLine()) !=null)            {               String[] split = line.split("\r\n");               String fb = split[0];               toBalance = Integer.parseInt(fb);               //System.out.println("toBalance "+toBalance);            }            buffReaderToBalance.close();                        FileReader fileReaderToAvailBalance = new FileReader(fileAccountToAvailBalance);            BufferedReader buffReaderToAvailBalance = new BufferedReader(fileReaderToAvailBalance);            while( (line = buffReaderToAvailBalance.readLine()) !=null)            {               String[] split = line.split("\r\n");               String fb = split[0];               toAvailBalance = Integer.parseInt(fb);               //System.out.println("toAvailBalance "+toAvailBalance);            }            buffReaderToAvailBalance.close();        }        catch (FileNotFoundException e)        {            e.printStackTrace();        }        catch (IOException e)        {            e.printStackTrace();        }        Money monToBalance = new Money(toBalance);        Money monToAvailBalance = new Money(toAvailBalance);                long subtractFromBalance = monFromBalance.subtractLong(amount);        //System.out.println("Simulated Bank subtract "+ subtractFromBalance);        long subtractFromAvailBalance = monFromAvailBalance.subtractLong(amount);                long addToBalance = monToBalance.addLong(amount);        long addToAvailBalance = monToAvailBalance.addLong(amount);                // Update account balances once we know everything is OK        try        {            FileWriter fwFromBalance = new FileWriter(fileAccountFromBalance, true);                                  writerFromBalance = new PrintWriter(fwFromBalance);                        writerFromBalance.println(subtractFromBalance);            writerFromBalance.flush();            writerFromBalance.close();                        FileWriter fwFromAvailBalance = new FileWriter(fileAccountFromAvailBalance, true);                                  writerFromAvailBalance = new PrintWriter(fwFromAvailBalance);                        writerFromAvailBalance.println(subtractFromAvailBalance);            writerFromAvailBalance.flush();            writerFromAvailBalance.close();                       FileWriter fwToBalance = new FileWriter(fileAccountToBalance, true);                                  writerToBalance = new PrintWriter(fwToBalance);                        writerToBalance.println(addToBalance);            writerToBalance.flush();            writerToBalance.close();                        FileWriter fwToAvailBalance = new FileWriter(fileAccountToAvailBalance, true);                                  writerToAvailBalance = new PrintWriter(fwToAvailBalance);                        writerToAvailBalance.println(addToAvailBalance);            writerToAvailBalance.flush();            writerToAvailBalance.close();        }        catch (FileNotFoundException e)        {            e.printStackTrace();        }        catch (IOException e)        {            e.printStackTrace();        }            //BALANCE [ fromAccountNumber ].subtract(amount);        //AVAILABLE_BALANCE [ fromAccountNumber ].subtract(amount);       // BALANCE [ toAccountNumber ].add(amount);       // AVAILABLE_BALANCE [ toAccountNumber ].add(amount);                // Return updated balances                //balances.setBalances(BALANCE [ toAccountNumber ],                             // AVAILABLE_BALANCE [ toAccountNumber ]);        //writer.close();        return new Success();    }         /** Simulate processing of an inquiry     *     *  @param message the message describing the inquiry requested     *  @param balances (out) balances in account     *  @return status code derived from current values     */    private Status inquiry(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();         int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getFromAccount() ];        if (accountNumber == 0)            return new Failure("Invalid account type");                // Return requested balances                //balances.setBalances(BALANCE [ accountNumber ],                             // AVAILABLE_BALANCE [ accountNumber ]);                return new Success();    }        /** Mengambil nomor rekening     *      */    public static int noRekening(int cardNumber)    {        int numberBankAccount = ACCOUNT_NUMBER[cardNumber][1];        return numberBankAccount;    }        /** Representation for status of a transaction that succeeded     */    private static class Success extends Status    {        public boolean isSuccess()        {            return true;        }                public boolean isInvalidPIN()        {            return false;        }                public String getMessage()        {            return null;        }    }        /** Representation for status of a transaction that failed (for reason other than     *  invalid PIN)     */    private static class Failure extends Status    {        /** Constructor         *         *  @param message description of the failure         */        public Failure(String message)        {            this.message = message;        }                public boolean isSuccess()        {            return false;        }                public boolean isInvalidPIN()        {            return false;        }                public String getMessage()        {            return message;        }                private String message;    }    /** Representation for status of a transaction that failed due to an invalid PIN     */    private static class InvalidPIN extends Failure    {        /** Constructor         *         *  @param message description of the failure         */        public InvalidPIN()        {            super("Invalid PIN");        }                public boolean isInvalidPIN()        {            return true;        }    }}    