/* * ATM Example system - file BillsPanel.java     * * copyright (c) 2001 - Russell C. Bjork * */ package simulation;import atm.ATM;import java.awt.*;import java.awt.event.*;/** The GUI panel that simulates the reading of the ATM card's magnetic stripe *  by asking the user to enter the number */class CardPanel extends Panel{          /** The field into which the card number is to be entered     */    private TextField cardNumberField;        private ATMPanel atmPanel;    private SimKeyboard keyboard;    /** Constructor     */    CardPanel()    {           //CardPanel.makeConstraints(3,3,0,0,GridBagConstraints.NONE);        setLayout(new GridLayout(0, 1, 0, 0));        //g.weightx = 5;        //g.weighty = 1;        setFont(new Font("Monospaced", Font.PLAIN, 14));                add(new Label("A real ATM would have a magnetic",                      Label.CENTER));        add(new Label("stripe reader to read the card",                      Label.CENTER));        add(new Label("For purposes of the simulation,",                      Label.CENTER));        add(new Label("please enter the card number manually.",                      Label.CENTER));        add(new Label("Then press RETURN",                      Label.CENTER));        add(new Label("(An invalid integer or an integer not",                      Label.CENTER));        add(new Label("greater than zero will be treated as",                      Label.CENTER));        add(new Label("an unreadable card)",                      Label.CENTER));                /*Button [] digitKey = new Button[10];        for (int i = 1; i < 10; i ++)        {             digitKey[i] = new Button("" + i);            add(digitKey[i]);        }        add(new Label(""));                digitKey[0] = new Button("0");        add(digitKey[0]);                add(new Label(""));*/        cardNumberField = new TextField(30);        cardNumberField.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e)            {                synchronized(CardPanel.this)                {                    CardPanel.this.notify();                }            }        });        Panel cardNumberPanel = new Panel();        cardNumberPanel.add(cardNumberField);        add(cardNumberPanel);        /*GridBagLayout keyboardLayout = new GridBagLayout();        GridBagConstraints g = new GridBagConstraints();        setLayout(keyboardLayout);        keyboardLayout.setConstraints(this,         CardPanel.makeConstraints(5, 10,                                4, 6,                                0));*/    }        /** Ask the customer to enter the number on the card     *     *  @return the number entered     */    synchronized int readCardNumber()    {        cardNumberField.setText("");                cardNumberField.requestFocus();        try        {            wait();        }        catch(InterruptedException e)        { }                        int cardNumber;        try        {            cardNumber = Integer.parseInt(cardNumberField.getText());            if (cardNumber <= 0)                cardNumber = -1;        }        catch(NumberFormatException e)        {            cardNumber = -1;        }                return cardNumber;    }        static GridBagConstraints makeConstraints(                    int row, int col, int width, int height, int fill)    {         GridBagConstraints g = new GridBagConstraints();        g.gridy = row;        g.gridx = col;        g.gridheight = height;        g.gridwidth = width;        //g.fill = fill;        g.insets = new Insets(0,3,0,0);        g.weightx = 1;        g.weighty = 1;        //g.anchor = GridBagConstraints.CENTER;        return g;    }}