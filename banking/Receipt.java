/* * ATM Example system - file Receipt.java * * copyright (c) 2001 - Russell C. Bjork * */ package banking;import atm.ATM;import atm.transaction.Transaction;import java.util.Date;import java.util.Enumeration;import java.io.*;/** Abstract base class for representation of a receipt to be printed.  Each *  specific type of transaction creates an instance of a concrete subclass *  of this class.   */public abstract class Receipt{       // Instance variables    /** Heading portion of the receipt - common to all forms of receipt     */    private String [] headingPortion;        /** Transaction details portion of the receipt - specific to each type of     *  transaction, and therefore filled in by subclasses     */    protected String [] detailsPortion;        /** Ending balances portion of the receipt - common to all forms of receipt     */    private String [] balancesPortion;          private String toAccountFile = "F:/My Documents/SEMESTER 7/PBO/atmgui/account/";    private String fromAccountFile = "F:/My Documents/SEMESTER 7/PBO/atmgui/account/";    private String toAccountPathBalance = null;    private String toAccountPathAvailBalance = null;    private String fromAccountPathBalance=null;    private String fromAccountPathAvailBalance=null;    private int fromBalance;    private int fromAvailBalance;    private int toBalance;    private int toAvailBalance;    private int accountNumber;    /** Constructor.  This base class constructor will create the portions of the     *  receipt that are common to all types of transaction, and the subclass     *  constructor will create the details portion unique to each type.     *     *  @param atm the ATM where the transaction was done     *  @param card the card that was used     *  @param transaction the Transaction object for the transaction     *  @param balances Balances object giving final balances for account used     */         protected Receipt(ATM atm, Card card, Transaction transaction, Balances balances)    {        // Heading portion of the receipt        int number = card.getNumber();        accountNumber = card.getBankAccount(number);        fromAccountPathBalance = fromAccountFile +accountNumber+"-balance.txt";        File fileAccountFromBalance = new File (fromAccountPathBalance);                fromAccountPathAvailBalance = fromAccountFile +accountNumber+"-availablebalance.txt";        File fileAccountFromAvailBalance = new File(fromAccountPathAvailBalance);        String line = null;                try        {                        FileReader fileReaderFromBalance = new FileReader(fileAccountFromBalance);            BufferedReader buffReaderFromBalance = new BufferedReader(fileReaderFromBalance);            while( (line = buffReaderFromBalance.readLine())!=null)            {               String[] split = line.split("\r\n");               String fb = split[0];               fromBalance = Integer.parseInt(fb);               //System.out.println("fromBalance "+fromBalance);            }            buffReaderFromBalance.close();                        FileReader fileReaderFromAvailBalance = new FileReader(fileAccountFromAvailBalance);            BufferedReader buffReaderFromAvailBalance = new BufferedReader(fileReaderFromAvailBalance);            while( (line = buffReaderFromAvailBalance.readLine()) !=null)            {               String[] split = line.split("\r\n");               String fb = split[0];               fromAvailBalance = Integer.parseInt(fb);               //System.out.println("fromAvailBalance "+fromAvailBalance);            }            buffReaderFromAvailBalance.close();        }        catch (FileNotFoundException e)        {            e.printStackTrace();        }        catch (IOException e)        {            e.printStackTrace();        }        Money monFromBalance = new Money(fromBalance);        Money monFromAvailBalance = new Money(fromAvailBalance);                        headingPortion = new String[4];        headingPortion[0] = new Date().toString();        headingPortion[1] = atm.getBankName();        headingPortion[2] = "ATM #" + atm.getID() + " " + atm.getPlace();        headingPortion[3] = "CARD " + card.getNumber() +         "\nBANK ACCOUNT'S NUMBER "+ card.getBankAccount(number) +                     " TRANS #" + transaction.getSerialNumber();        // The constructor for each subclass will fill in the details array        // appropriately                // Balances portion of the receipt                balancesPortion = new String[2];        balancesPortion[0] = "TOTAL BAL: " + monFromBalance;        balancesPortion[1] = "AVAILABLE: " + monFromAvailBalance;    }    /** Get the individual lines to be printed.  Each call to the nextElement()     *  of the enumeration gets one line (as a String)     */         public Enumeration getLines()    {        return new Enumeration() {                    // The current portion of the receipt being printed                        private int portion = 0;                        // The index of the line in the current portion                        private int index = 0;                        public boolean hasMoreElements()            {                return portion < 2 || index < balancesPortion.length;            }                        public Object nextElement()            {                String line = null;                                switch (portion)                {                    case 0:                                            line = headingPortion[index ++];                        if (index >= headingPortion.length)                        {                            portion ++;                            index = 0;                        }                        break;                                        case 1:                                            line = detailsPortion[index ++];                        if (index >= detailsPortion.length)                        {                            portion ++;                            index = 0;                        }                        break;                                            case 2:                                            line = balancesPortion[index ++];                        break;                }                return line;            }        };    }}